import enfermedadesAutoInmunes.*
import enfermedadesInfecciosas.*
import personas.*
import medico.*
import jefeDeDepartamento.*
import laMuerte.*

describe "Personas" {
	var logan
	var frank
	var malaria500
	var malaria800
	var otitis
	var lupus
	// Temporada 2
	var house 
	var cameron
	var malaria3000
	
	method initialize() {
		//Enfermedades
		malaria500 = new EnfermedadInfecciosa(celulasAmenazadas = 500)
		otitis = new EnfermedadInfecciosa(celulasAmenazadas = 100)
		lupus = new EnfermedadAutoinmune(celulasAmenazadas = 10000)
		malaria800 = new EnfermedadInfecciosa(celulasAmenazadas = 800)
		malaria3000 = new EnfermedadInfecciosa(celulasAmenazadas = 3000)
		//Personas
		logan = new Persona(temperatura = 36, celulas = 3000000)
		logan.contraerEnfermedad(malaria500)
		logan.contraerEnfermedad(otitis)
		logan.contraerEnfermedad(lupus)
		
		frank = new Persona(temperatura = 36, celulas = 3500000)
		// Medicos
		house = new JefeDeDepartamento(dosis = 0, celulas = 3000000, temperatura = 36)
		cameron = new Medico(dosis =10, celulas = 3000000, temperatura = 36)
		house.subordinarA(cameron) 
		
	}
	
	test "Que Frank se contraiga de la enfermedad malaria800 está OK" { //Punto 1
		frank.contraerEnfermedad(malaria800)
		assert.equals(#{malaria800}, frank.enfermedades())
	}
	
	test "Hacer que la malaria de Logan se reproduzca está OK" { //Punto 2
		malaria500.reproducir()
		assert.equals(1000, malaria500.celulasAmenazadas())
	}
	
	test "Hacer que pase un dia logan y revisar las condiciones del punto 3 esta OK" { //Punto 3
		logan.vivirUnDia()
		assert.equals(lupus, logan.enfermedadQueMasCelulasAfecta()) //a
		assert.notThat(logan.enComa()) //b
		assert.equals(0, logan.celulasAfectadasEnfermedadesAgresivas()) //c
	}
	
	test "Hacer que logan pase 31 dias y revise las condiciones del punto 3 está OK" { // Punto 4
		logan.pasarDias(31)
		assert.equals(lupus, logan.enfermedadQueMasCelulasAfecta()) //a
		assert.that(logan.enComa()) //b
		assert.equals(10000, logan.celulasAfectadasEnfermedadesAgresivas()) //c
	}
	
	test "Punto 1 Temporada 2" {
		malaria3000.atenuarEn(100)
		lupus.atenuarEn(500)
		assert.equals(2900, malaria3000.celulasAmenazadas())
		assert.equals(9500, lupus.celulasAmenazadas())
	}

	test "Punto 2 Temporada 2" {
		cameron.atenderA(logan)
		assert.equals(350, malaria500.celulasAmenazadas())
		assert.equals(9850, lupus.celulasAmenazadas())
	}
	
	
	test "Punto 3 Temporada 2" {
		cameron.contraerEnfermedad(malaria3000)
		house.atenderA(cameron)
		assert.equals(2700, malaria3000.celulasAmenazadas())
	}
	
	
	test "Punto 4 Temporada 2" {
		cameron.contraerEnfermedad(malaria3000)
		house.contraerEnfermedad(malaria500) // Hay que hacer un metodo para comprobar luego las celulas de la enfermedad de tal persona
		assert.equals(2850, malaria3000.celulasAmenazadas())
		assert.equals(350, malaria500.celulasAmenazadas())
	}
	
	test "Punto 5 Temporada 2" {
		house.contraerEnfermedad(laMuerte)
		house.vivirUnDia()  // Se va a morir
		assert.equals(0, house.temperatura())
	}
}

